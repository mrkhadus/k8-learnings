apiVersion: apps/v1
kind: Deployment
metadata:
  name: volume-deployment
spec:
  replicas: 2
  selector:
    matchExpressions:   # Tried it here. Still need to explore more on it.
    - {key: app, operator: In, values: [story-app, stroy-ap]}
    # matchLabels:
    #   app: story-app
  template:
    metadata:
      labels:
        app: story-app
    spec:
      containers:
      - name: story-app-cont
        image: mrkhadus/story-app:env
        resources:
          limits:
            cpu: 50m
            memory: 64Mi
        # env:
        #   - name: STORY_FOLDER
        #     value: 'Story'   # change it in the app.js to 'process.env.STORY_FOLDER'
            # if we want to change the volumeMounts mount path, make changes here(line below the next line) and no need to touch the app
        env:
          - name: STORY_FOLDER
            valueFrom:
              configMapKeyRef:
                name: data-store-env # name defined in the metadata of env file
                key: folder    # key name defined in the data (key value pair) 
        volumeMounts:
          - mountPath: /app/story  # ==> this is the path in the app which we use.
            name: story-volume   # the name of volume which should be mounted to above path
      # volumes:
      #   - name: story-volume
      #     emptyDir: {}   # Empty directory - POD SPECIFIC initial GET request fails as we don't have text.txt file in this dir needed for the app, POST creates one for us.

      volumes:
        - name: story-volume
          # hostPath:
          #   path: /hostpath-vol # hotspath-vol the folder in the local(node on which pod runs) will be linked to the internal path /app/story
          #   type: Directory # DirectoryOrCreate is used when the path is not created already in host. 
          # # hostPAth will be used only in local (single node) deployment testing and not for multi-node.
          persistentVolumeClaim:
            claimName: mypvc  # metadata for persistent volume. # configured for all cluster and not just the pod.